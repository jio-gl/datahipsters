'''
Created on 03/06/2014

@author: jose
'''

from simhash import Simhash, SimhashIndex

def create_input(max_lines=1000):
    
    user_items = {}
    
    c = 0
    # 
    #for l in open('../data/ml-100k/u.data'):
    for l in open('../../DataHipsters-data/data/ml-1m/ratings.dat'):
        
        #r = l.split('\t')
        r = l.split('::')
        user = int(r[0])
        item = int(r[1])
        rating = int(r[2])
        
        if not user in user_items:
            user_items[user] = []
        for i in range(rating-2):
            user_items[user].append( item )
        
        c += 1
        if c >= max_lines:
            break
        
    o = open('../../DataHipsters-data/data/ml-1m/u.dh','w')
    o2 = open('../../DataHipsters-data/data/ml-1m/u.finger','w')
    for user, items in user_items.iteritems():
        l = '%d\t%s\n' % (user, ' '.join( map(str,sorted(items)) )) 
        print l
        o.write( l )
        
        l2 = '%d\t%x\n' % (user, Simhash(' '.join( map(str,sorted(items)) )).value ) 
        print l2
        o2.write( l2 )                   
        
    o.close()
    o2.close()


def create_input_sets(max_lines=1000):
    
    user_items = {}
    
    c = 0
    # 
    #for l in open('../data/ml-100k/u.data'):
    o = open('../../DataHipsters-data/data/ml-1m/u.sets','w')
    for l in open('../../DataHipsters-data/data/ml-1m/ratings.dat'):
        
        #r = l.split('\t')
        r = l.split('::')
        user = int(r[0])
        item = int(r[1])
        rating = int(r[2])
        
        if not user in user_items:
            user_items[user] = []
        for i in range(rating-4):
            user_items[user].append( item )
            l = '%d\t%s\n' % (user, item)
            o.write( l )        
            c += 1
            if c >= max_lines:
                break
        if c >= max_lines:
            break
    
    o.close()
    
    
def load_index():
    
    input = open('../../DataHipsters-data/data/ml-1m/u.finger')
    
    objs = []
    for l in input:
        k = l.split('\t')[0]
        h = Simhash('')
        h.value = int( l.split('\t')[1].strip(), 16) 
        
        print l
        
        objs.append( (k,h) )
        
    return SimhashIndex(objs)


    
if __name__ == '__main__':
    
        create_input_sets(500000)
        
        
        
        
#        index = load_index()

        #s1 = Simhash('1 17 213 213 213 232 232 232 246 246 246 260 260 263 263 265 290 290 296 296 306 306 318 318 326 326 334 334 573 573 589 589 593 593 593 608 608 649 649 649 903 903 904 904 908 908 910 910 912 912 912 913 913 913 916 916 916 919 919 919 920 923 923 923 924 924 924 930 930 953 953 953 978 978 994 1103 1103 1104 1104 1104 1111 1111 1111 1127 1136 1136 1150 1150 1150 1172 1172 1179 1179 1185 1185 1185 1188 1188 1189 1189 1189 1193 1193 1196 1198 1199 1199 1199 1419 1449 1537 1537 1537 1594 1834 1834 1900 1900 1900 1912 1921 1921 1929 1929 1929 1945 1945 1945 1947 1947 2068 2068 2070 2070 2076 2076 2076 2100 2100 2150 2439 2439 2455 2503 2503 2503 2512 2512 2512 2571 2571 2575 2575 2580 2580 2599 2599 2599 2852 2858 2858 2859 2859 2863 2863 2872 2872 3067 3067 3068 3070 3072 3083 3083 3089 3089 3089 3095 3095 3097 3097 3101 3101 3108 3108 3111 3111 3111 3134 3134 3134 3168 3168 3182 3182 3182 3418 3421 3422 3449 3471 3471 3504 3504 3505 3505 3521 3521 3521 3543 3543 3547 3547 3819 3819 3819')
        #print index.get_near_dups(s1)
###        s2 = Simhash('1 17 213 213 213 232 232 232 246 246 246 260 260 263 263 265 290 290 296 296 306 306 318 318 326 326 334 334 573 573 589 589 593 593 593 608 608 649 649 649 903 903 904 904 908 908 910 910 912 912 912 913 913 913 916 916 916 919 919 919 920 923 923 923 924 924 924 930 930 953 953 953 978 978 994 1103 1103 1104 1104 1104 1111 1111 1111 1127 1136 1136 1150 1150 1150 1172 1172 1179 1179 1185 1185 1185 1188 1188 1189 1189 1189 1193 1193 1196 1198 1199 1199 1199 1419 1449 1537 1537 1537 1594 1834 1834 1900 1900 1900 1912 1921 1921 1929 1929 1929 1945 1945 1945 1947 1947 2068 2068 2070 2070 2076 2076 2076 2100 2100 2150 2439 2439 2455 2503 2503 2503 2512 2512 2512 2571 2571 2575 2575 2580 2580 2599 2599 2599 2852 2858 2858 2859 2859 2863 2863 2872 2872 3067 3067 3068 3070 3072 3083 3083 3089 3089 3089 3095 3095 3097 3097 3101 3101 3108 3108 3111 3111 3111 3134 3134 3134 3168 3168 3182 3182 3182 3418 3421 3422 3449 3471 3471 3504 3504 3505 3505 3521 3521 3521 3543 3543 3547 3547 3819 3819')
##        print index.get_near_dups(s2)

        #index.add('6041', s1)
        #index.add('6042', s2)
        #print index.get_near_dups(s1)


        # 944    5 5 5 11 11 98 98 98 159 185 185
        # 944    8c7a42284202eee1
   
        #s1 = Simhash('5 5 5 11 11 98 98 98 159 185 185')        
        # 6040    1 17 213 213 213 232 232 232 246 246 246 260 260 263 263 265 290 290 296 296 306 306 318 318 326 326 334 334 573 573 589 589 593 593 593 608 608 649 649 649 903 903 904 904 908 908 910 910 912 912 912 913 913 913 916 916 916 919 919 919 920 923 923 923 924 924 924 930 930 953 953 953 978 978 994 1103 1103 1104 1104 1104 1111 1111 1111 1127 1136 1136 1150 1150 1150 1172 1172 1179 1179 1185 1185 1185 1188 1188 1189 1189 1189 1193 1193 1196 1198 1199 1199 1199 1419 1449 1537 1537 1537 1594 1834 1834 1900 1900 1900 1912 1921 1921 1929 1929 1929 1945 1945 1945 1947 1947 2068 2068 2070 2070 2076 2076 2076 2100 2100 2150 2439 2439 2455 2503 2503 2503 2512 2512 2512 2571 2571 2575 2575 2580 2580 2599 2599 2599 2852 2858 2858 2859 2859 2863 2863 2872 2872 3067 3067 3068 3070 3072 3083 3083 3089 3089 3089 3095 3095 3097 3097 3101 3101 3108 3108 3111 3111 3111 3134 3134 3134 3168 3168 3182 3182 3182 3418 3421 3422 3449 3471 3471 3504 3504 3505 3505 3521 3521 3521 3543 3543 3547 3547 3819 3819 3819
        # 1190    112 112 480 480 527 527 527 590 590 590 1088 1088 1101 1101 1210 1210 1210 1225 1225 1225 1356 1356 1580 1580 1580 1959 1959 2006 2006 2100 2100 2109 2143 2145 2145 2145 2259 2405 2405 2469 2858 2858 2916 2916 2942 2942 3000 3072 3072 3175 3175 3175 3555 3699 3699
        # 926    1 1 1 10 10 73 73 73 260 260 260 329 329 364 364 364 367 367 474 474 480 480 480 551 551 551 585 588 588 589 589 589 594 594 595 596 596 661 661 661 899 899 903 903 903 904 904 904 908 908 908 919 919 1015 1015 1025 1025 1028 1028 1032 1035 1035 1035 1073 1073 1080 1080 1097 1097 1127 1127 1127 1136 1136 1136 1148 1148 1148 1197 1197 1197 1198 1198 1198 1219 1219 1219 1278 1278 1278 1282 1282 1513 1513 1513 1580 1580 1580 1595 1610 1610 1665 1665 1722 1722 1831 1831 1911 1911 1947 1947 1947 2006 2006 2006 2018 2018 2080 2080 2081 2081 2081 2083 2083 2087 2087 2137 2137 2174 2174 2273 2273 2273 2310 2310 2355 2355 2355 2384 2394 2394 2502 2502 2502 2555 2565 2565 2571 2571 2571 2572 2572 2572 2581 2605 2605 2617 2617 2683 2683 2683 2686 2687 2687 2694 2694 2701 2701 2716 2716 2720 2720 2723 2723 2724 2724 2759 2759 2761 2761 2762 2762 2762 2797 2806 2806 2828 2907 2907 2907 2987 2987 3034 3034 3034 3081 3081 3114 3114 3114 3157 3157 3175 3175 3175 3189 3189 3301 3301 3301 3324 3324 3354 3354 3396 3483 3483 3594 3594 3623 3623 3751 3751 3755 3755 3793 3793 3793 3826 3826 3826 3948 3948 3948 3952 3952 3952

        
        '''
944    5    5    881250949
944    11    4    881250949
944    98    5    881250949
944    185    4    881250949
944    159    3    881250949
'''